---
# .github/workflows/manage-emergency-ruleset.yaml
name: manage-emergency-ruleset
on:
  workflow_dispatch:
    inputs:
      lock:
        description: 'true=apply lockdown; false=remove lockdown'
        required: true
        type: boolean
  workflow_call:
    inputs:
      lock:
        description: "true=apply lockdown; false=remove lockdown"
        required: true
        type: boolean
    secrets:
      BRANCH_RULESETS:
        required: true
permissions:
  contents: read
jobs:
  admin-only:
    uses: ./.github/workflows/gate-admin.yaml
  lookup:
    name: Lookup Emergency Lockdown ruleset
    uses: ./.github/workflows/find-ruleset.yaml
    with:
      ruleset_name: "Emergency Lockdown"
  lock-repo:
    name: Apply Emergency Lockdown
    needs: [admin-only, lookup]
    if: ${{ inputs.lock == true }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create ruleset if missing
        env:
          GH_TOKEN: ${{ secrets.BRANCH_RULESETS }}
        run: |
          if [ -z "${{ needs.lookup.outputs.ruleset_id }}" ]; then
            gh api --method POST /repos/${{ github.repository }}/rulesets \
              -H "Accept: application/vnd.github+json" \
              -f name="Emergency Lockdown" \
              -F enforcement="active" \
              -F bypass_actors="[]" \
              -f target="branch" \
              -f target_matchers[0].name="pattern" \
              -f target_matchers[0].pattern="*" \
              -f target_matchers[0].exclude="false" \
              -f conditions.required_status_checks.strict="true" \
              -f conditions.required_status_checks.contexts[]="admin-check / check-admin" \
              -f conditions.pull_request.approvals_required=1 \
              -f conditions.pull_request.require_code_owner_review="true" \
              -f rules.allow_force_pushes="false" \
              -f rules.allow_deletions="false" \
              -f rules.require_linear_history="true"
            echo "Created Emergency Lockdown ruleset."
          else
            echo "Ruleset already exists: ${{ needs.lookup.outputs.ruleset_id }}"
          fi
  unlock-repo:
    name: Remove Emergency Lockdown
    needs: [admin-only, lookup]
    if: ${{ inputs.lock == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete ruleset if present
        env:
          GH_TOKEN: ${{ secrets.BRANCH_RULESETS }}
        run: |-
          RS_ID=${{ needs.lookup.outputs.ruleset_id }}
          if [ -n "$RS_ID" ]; then
            gh api -X DELETE /repos/${{ github.repository }}/rulesets/$RS_ID
            echo "Deleted ruleset $RS_ID"
          else
            echo "No Emergency Lockdown ruleset found."
          fi
