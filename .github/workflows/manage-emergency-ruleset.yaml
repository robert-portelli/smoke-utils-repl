---
# .github/workflows/manage-emergency-ruleset.yaml
name: manage-emergency-ruleset
on:
  workflow_dispatch:
    inputs:
      lock:
        description: 'true=apply lockdown; false=remove lockdown'
        required: true
        type: boolean
  workflow_call:
    inputs:
      lock:
        description: "true=apply lockdown; false=remove lockdown"
        required: true
        type: boolean
    secrets:
      BRANCH_RULESETS:
        required: true
permissions:
  contents: read
jobs:
  admin-only:
    uses: ./.github/workflows/gate-admin.yaml
  lookup:
    name: Lookup Emergency Lockdown ruleset
    uses: ./.github/workflows/find-ruleset.yaml
    with:
      ruleset_name: "Emergency Lockdown"
  lock-repo:
    name: Apply Emergency Lockdown
    needs: [admin-only, lookup]
    if: ${{ inputs.lock == true }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Build emergency ruleset payload
        run: |
          jq -n \
            --arg name "Emergency Lockdown" \
            --argjson bypass_actors '[]' \
            --argjson cond_checks '{
              type: "required_status_checks",
              parameters: {
                required_status_checks:[{ context:"admin-check / check-admin" }],
                strict_required_status_checks_policy:true,
                do_not_enforce_on_create:false
              }
            }' \
            --argjson pr_rule '{
              type:"pull_request",
              parameters:{
                approvals_required:1,
                dismiss_stale_reviews_on_push:true,
                require_code_owner_review:false
              }
            }' \
            --argjson rules_array '[{type:"required_linear_history"},{type:"non_fast_forward"},$cond_checks,$pr_rule]' \
            '{
              name: $name,
              target: "branch",
              enforcement: "active",
              target_matchers: [{ name:"pattern", pattern:"*", exclude:false }],
              rules: $rules_array,
              bypass_actors: $bypass_actors
            }' > payload.json
      - name: Create emergency ruleset
        env:
          GH_TOKEN: ${{ secrets.BRANCH_RULESETS }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/rulesets \
            --input payload.json
  unlock-repo:
    name: Remove Emergency Lockdown
    needs: [admin-only, lookup]
    if: ${{ inputs.lock == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete ruleset if present
        env:
          GH_TOKEN: ${{ secrets.BRANCH_RULESETS }}
        run: |-
          RS_ID=${{ needs.lookup.outputs.ruleset_id }}
          if [ -n "$RS_ID" ]; then
            gh api -X DELETE /repos/${{ github.repository }}/rulesets/$RS_ID
            echo "Deleted ruleset $RS_ID"
          else
            echo "No Emergency Lockdown ruleset found."
          fi
