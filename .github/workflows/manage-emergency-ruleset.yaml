---
# .github/workflows/manage-emergency-ruleset.yaml
name: manage-emergency-ruleset
on:
  workflow_dispatch:
    inputs:
      lock:
        description: 'true=apply lockdown; false=remove lockdown'
        required: true
        type: boolean
  workflow_call:
    inputs:
      lock:
        description: "true=apply lockdown; false=remove lockdown"
        required: true
        type: boolean
    secrets:
      BRANCH_RULESETS:
        required: true
permissions:
  contents: read
jobs:
  admin-only:
    uses: ./.github/workflows/gate-admin.yaml
  lookup:
    name: Lookup Emergency Lockdown ruleset
    uses: ./.github/workflows/find-ruleset.yaml
    with:
      ruleset_name: "Emergency Lockdown"
  lock-repo:
    name: Apply Emergency Lockdown
    needs: [admin-only, lookup]
    if: ${{ inputs.lock == true }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Build emergency ruleset payload
        run: |
          cat << 'EOF' > payload.json
          {
            "name": "Emergency Lockdown",
            "target": "branch",
            "enforcement": "active",
            "target_matchers": [
              { "name": "pattern", "pattern": "*", "exclude": false }
            ],
            "conditions": {
              "required_status_checks": {
                "strict": true,
                "contexts": ["admin-check / check-admin"]
              },
              "pull_request": {
                "approvals_required": 1,
                "dismiss_stale_reviews_on_push": true,
                "require_code_owner_review": false
              }
            },
            "rules": [
              { "type": "required_linear_history" },
              { "type": "non_fast_forward" }
            ],
            "bypass_actors": []
          }
          EOF
      - name: Create Emergency Lockdown ruleset
        env:
          GH_TOKEN: ${{ secrets.BRANCH_RULESETS }}
        run: |
          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/rulesets" \
            --input payload.json
  unlock-repo:
    name: Remove Emergency Lockdown
    needs: [admin-only, lookup]
    if: ${{ inputs.lock == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete ruleset if present
        env:
          GH_TOKEN: ${{ secrets.BRANCH_RULESETS }}
        run: |-
          RS_ID=${{ needs.lookup.outputs.ruleset_id }}
          if [ -n "$RS_ID" ]; then
            gh api -X DELETE /repos/${{ github.repository }}/rulesets/$RS_ID
            echo "Deleted ruleset $RS_ID"
          else
            echo "No Emergency Lockdown ruleset found."
          fi
